#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require "pp"
require "shellwords"
require File.join(File.dirname(__FILE__), "zoneshow.rex")

class SANZoneShow < Racc::Parser

module_eval(<<'...end zoneshow.racc/module_eval...', 'zoneshow.racc', 80)
  def on_error *rr
    puts "---- on_error   lineno:#{@lineno}"
    super
  end

...end zoneshow.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    32,    10,    32,    33,    34,    33,    34,    39,    40,    47,
    48,    39,    40,    11,    14,    15,    16,    19,    20,    23,
     3,    26,    28,    29,    35,    36,    41,    42,    44,    24,
     4,     6,     7,     9 ]

racc_action_check = [
    24,     6,    41,    24,    24,    41,    41,    29,    29,    43,
    43,    44,    44,     7,     8,    10,    11,    12,    14,    17,
     0,    20,    21,    23,    25,    28,    30,    35,    37,    19,
     1,     2,     3,     4 ]

racc_action_pointer = [
    18,    30,    27,    29,    33,   nil,    -5,     9,     8,   nil,
     8,    11,     8,   nil,    11,   nil,   nil,     7,   nil,    22,
    14,    13,   nil,    16,    -7,    16,   nil,   nil,    18,    -3,
    18,   nil,   nil,   nil,   nil,    20,   nil,    20,   nil,   nil,
   nil,    -5,   nil,    -1,     1,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -34,   -34,   -34,    -6,   -34,    -1,   -34,   -34,   -11,    50,
   -34,   -34,   -20,    -5,   -34,   -28,    -2,    -3,   -10,   -34,
   -34,    -4,   -19,   -34,   -15,    -7,    -9,   -27,   -34,   -24,
   -12,   -14,   -16,   -17,   -18,   -34,   -31,   -21,   -23,   -25,
   -26,   -34,    -8,   -29,   -34,   -13,   -30,   -32,   -33,   -22 ]

racc_goto_table = [
    31,    38,     5,     8,    12,    17,    21,    13,    25,    18,
    30,    22,    37,    27,    43,     1,    49,    45,    46,     2 ]

racc_goto_check = [
    12,    15,     3,     4,     5,     6,     7,     8,     9,    10,
    11,    13,    14,    16,    17,     1,    15,    12,    18,     2 ]

racc_goto_pointer = [
   nil,    15,    19,     0,     0,    -4,    -7,    -9,    -1,   -12,
    -3,   -14,   -24,    -6,   -17,   -28,    -8,   -22,   -25 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 14, :_reduce_1,
  4, 14, :_reduce_2,
  4, 15, :_reduce_3,
  4, 16, :_reduce_4,
  2, 17, :_reduce_5,
  0, 17, :_reduce_6,
  3, 21, :_reduce_7,
  3, 22, :_reduce_8,
  1, 22, :_reduce_9,
  2, 18, :_reduce_10,
  0, 18, :_reduce_11,
  3, 23, :_reduce_12,
  3, 24, :_reduce_13,
  1, 24, :_reduce_14,
  0, 24, :_reduce_15,
  1, 25, :_reduce_none,
  1, 25, :_reduce_none,
  1, 25, :_reduce_none,
  2, 19, :_reduce_19,
  0, 19, :_reduce_20,
  3, 26, :_reduce_21,
  3, 27, :_reduce_22,
  1, 27, :_reduce_23,
  0, 27, :_reduce_24,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  2, 20, :_reduce_27,
  0, 20, :_reduce_28,
  3, 29, :_reduce_29,
  2, 30, :_reduce_30,
  0, 30, :_reduce_31,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none ]

racc_reduce_n = 34

racc_shift_n = 50

racc_token_table = {
  false => 0,
  :error => 1,
  :DEFINED => 2,
  :NODEFINED => 3,
  :EFFECTIVE => 4,
  :NOEFFECTIVE => 5,
  :CFG => 6,
  :NAME => 7,
  ";" => 8,
  :ZONE => 9,
  :PORT => 10,
  :WWPN => 11,
  :ALIAS => 12 }

racc_nt_base = 13

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "DEFINED",
  "NODEFINED",
  "EFFECTIVE",
  "NOEFFECTIVE",
  "CFG",
  "NAME",
  "\";\"",
  "ZONE",
  "PORT",
  "WWPN",
  "ALIAS",
  "$start",
  "zoneshow",
  "defx",
  "effx",
  "cfgs",
  "zones",
  "aliass",
  "ezones",
  "cfg",
  "zns",
  "zone",
  "ans",
  "an",
  "alias",
  "aps",
  "ap",
  "ezone",
  "ports",
  "port" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'zoneshow.racc', 6)
  def _reduce_1(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'zoneshow.racc', 7)
  def _reduce_2(val, _values, result)
     STDERR.puts " !! not defined and effect"; result = [[{},{},{}], {}] 
    result
  end
.,.,

module_eval(<<'.,.,', 'zoneshow.racc', 10)
  def _reduce_3(val, _values, result)
     result = [val[1].freeze, val[2].freeze, val[3].freeze] 
    result
  end
.,.,

module_eval(<<'.,.,', 'zoneshow.racc', 13)
  def _reduce_4(val, _values, result)
     result = { val[2] => val[3].freeze } 
    result
  end
.,.,

module_eval(<<'.,.,', 'zoneshow.racc', 16)
  def _reduce_5(val, _values, result)
     result = val[0].merge(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'zoneshow.racc', 17)
  def _reduce_6(val, _values, result)
     result = {} 
    result
  end
.,.,

module_eval(<<'.,.,', 'zoneshow.racc', 20)
  def _reduce_7(val, _values, result)
     result = { val[1] => val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'zoneshow.racc', 23)
  def _reduce_8(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'zoneshow.racc', 24)
  def _reduce_9(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'zoneshow.racc', 28)
  def _reduce_10(val, _values, result)
     result = val[0].merge(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'zoneshow.racc', 29)
  def _reduce_11(val, _values, result)
     result = {} 
    result
  end
.,.,

module_eval(<<'.,.,', 'zoneshow.racc', 32)
  def _reduce_12(val, _values, result)
     result = { val[1] => val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'zoneshow.racc', 35)
  def _reduce_13(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'zoneshow.racc', 36)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'zoneshow.racc', 37)
  def _reduce_15(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

module_eval(<<'.,.,', 'zoneshow.racc', 45)
  def _reduce_19(val, _values, result)
     result = val[0].merge(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'zoneshow.racc', 46)
  def _reduce_20(val, _values, result)
     result = {} 
    result
  end
.,.,

module_eval(<<'.,.,', 'zoneshow.racc', 49)
  def _reduce_21(val, _values, result)
     result = { val[1] => val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'zoneshow.racc', 52)
  def _reduce_22(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'zoneshow.racc', 53)
  def _reduce_23(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'zoneshow.racc', 54)
  def _reduce_24(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

module_eval(<<'.,.,', 'zoneshow.racc', 61)
  def _reduce_27(val, _values, result)
     result = val[0].merge(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'zoneshow.racc', 62)
  def _reduce_28(val, _values, result)
     result = {} 
    result
  end
.,.,

module_eval(<<'.,.,', 'zoneshow.racc', 65)
  def _reduce_29(val, _values, result)
     result = { val[1] => val[2] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'zoneshow.racc', 68)
  def _reduce_30(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'zoneshow.racc', 69)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 32 omitted

# reduce 33 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class SANZoneShow

def find_zoneshow_str_from_log(str)
  begin_pos = str.rindex(/^\s*Defined configuration:/)
  return ('') unless begin_pos
  end_pos = str.index(/^\s*\w+\:\w+\s*\>/, begin_pos) || 0
  str[begin_pos..end_pos-1]
end

def _definedcfg2defx(all)
  if all.lstrip.start_with? 'no configuration defined'
    return [{}, {}, {}]
  end
  cfg_str, other = all.split('zone:', 2)
  zone_str, ali_str = other.split('alias:', 2)

  cfgs=cfg_str.split('cfg:').map do |s|
    s.gsub(";",' ').shellsplit
  end
  cfgs.delete([])
  cfgh = {}
  cfgs.each do |cfg|
    cfgh[cfg[0]] = cfg[1..-1]
  end

  as = {}
  ali_str.to_s.split("alias:").map do |s|
    ss = s.gsub(";",' ').shellsplit
    as[ss[0]] = ss[1..-1]
  end

  zs = {}
  zone_str.split("zone:").each do |s|
    ss = s.gsub(";",' ').shellsplit
    zs[ss[0]] = ss[1..-1]
  end

  [cfgh, zs, as]
end

def _effectivecfg2effx(all)
  if all.lstrip.start_with? 'no configuration in effect'
    return({})
  end
  cfg_str, zone_str = all.split('zone:', 2)

  cfgs=cfg_str.split('cfg:')
  STDERR.puts "Error: effective config size > 1. #{cfg_str}" unless cfgs.size == 2 && cfgs[0].strip == ''
  cfg_name = cfgs[1].strip

  zs = {}
  zone_str.split('zone:').each do |s|
    ss = s.shellsplit
    zs[ss[0]] = ss[1..-1]
  end
  {cfg_name => zs}
end

def my_zoneshow_parse(str)
  defcfg, effcfg = str.sub(/^\s*Defined configuration:/, '').split(/^\s*Effective configuration:/)
  defx2 = _definedcfg2defx(defcfg)
  effx2 = _effectivecfg2effx(effcfg)
  [defx2, effx2]
end

def create_script_from_defx(defx)
  cfgs, zones, aliass = defx
  str_s = []
  aliass.each do |k, v|
    vs = v.join(';')
    STDERR.puts 'Error: alias join have " ' if vs.include?('"')
    str_s << %{alicreate "#{k}","#{vs}"}
  end
  zones.each do |k, v|
    vs = v.join(';')
    STDERR.puts 'Error: zone join have " ' if vs.include?('"')
    str_s << %{zonecreate "#{k}","#{vs}"}
  end
  cfgs.each do |k, v|
    vs = v.join(';')
    STDERR.puts 'Error: cfg join have " ' if vs.include?('"')
    str_s << %{cfgcreate "#{k}","#{vs}"}
  end
  str_s << '# cfgsave'
  str_s
end

def create_script_from_effx(effx)
  str_s = []
  effx.each do |k2, v2|
    v2.each do |k, v|
      vs = v.join(';')
      STDERR.puts 'Error: zone join have " ' if vs.include?('"')
      str_s << %{zonecreate "#{k}","#{vs}"}
    end
    vs = v2.keys.join(';')
    STDERR.puts 'Error: cfg join have " ' if vs.include?('"')
    str_s << %{cfgcreate "#{k2}","#{vs}"}
  end
  str_s << '# cfgsave'
  str_s
end

def diff_defx_and_effx(defx, effx)
  res = defx_split_and_expand_ports(defx)
  eff_name = effx.keys[0]
  effx[eff_name] == res[eff_name]
end

def defx_split_and_expand_ports(defx)
  cfgs, zones, aliass = defx
  res = {}
  cfgs.each do |name, zs|
    res[name] = z_ = {}
    zs.each do |zn|
      z_[zn] = v_ = []
      zones.fetch(zn).each do |pOwOn|
        # FIXME TODO
        v_.concat(/^\d+,\d+$|^\w{2}(:\w{2}){7}$/ =~ pOwOn ? [pOwOn] : aliass.fetch(pOwOn))
      end
    end
  end
  res
end

def parse_file(fn)
  zoneshow_s = find_zoneshow_str_from_log(File.binread fn)
  if zoneshow_s.empty?
    puts "empty zoneshow\n\n\n"
    return
  end

  px = SANZoneShow.new
  begin
    defx, effx = px.scan_str(zoneshow_s)
  ensure
  end
  defx2, effx2 = my_zoneshow_parse(zoneshow_s)
  puts "\n**** Use RACC Parser result and My Parser result is same?"
  p [defx==defx2, effx==effx2]
  unless defx==defx2
    pp defx,defx2
  end
  unless effx==effx2
    pp effx,effx2
  end
  puts


  cfgs, zones, aliass = defx
  puts "\n**** Defined config have: cfgs: #{cfgs.size}  zones: #{zones.size}  aliass: #{aliass.size}"
  pp({'cfgS'=>cfgs}, {'zoneS'=>zones}, {'aliasS'=>aliass})

  puts
  puts "\n**** Effective config:"
  pp effx

  puts "\n**** Show defined config split and expand ports:"
  res = defx_split_and_expand_ports(defx)
  pp res

  puts "\n****  Is effective config and defined config same ?"
  p diff_defx_and_effx(defx, effx)

  puts "\n\n**** create_script_from_effx:"
  puts create_script_from_effx(effx)

  puts "\n\n**** create_script_from_defx:"
  puts create_script_from_defx(defx)
end

if __FILE__ == $0
  while fn = ARGV.shift
    if File.file? fn
      puts "\n----- #{fn} -----\n"
      parse_file(fn)
    end
  end
end
