# Brocade SAN zoneshow parser


class SANZoneRaccParser
rule

zoneshow    : defx  effx            { result = val }
            | DEFINED NODEFINED EFFECTIVE NOEFFECTIVE { STDERR.puts " !! not defined and effect"; result = [[{},{},{}], {}] }
            ;

defx        : DEFINED cfgs zones aliass { result = [val[1].freeze, val[2].freeze, val[3].freeze] }
            ;

effx        : EFFECTIVE CFG NAME ezones { result = { val[2] => val[3].freeze } }
            ;

cfgs        : cfgs cfg              { result = val[0].merge(val[1]) }
            | /* none */            { result = {} }
            ;

cfg         : CFG NAME zns          { result = { val[1] => val[2] } }
            ;

zns         : zns ';' NAME          { result = val[0] << val[2] }
            | NAME                  { result = [val[0]] }
            ;


zones       : zones zone            { result = val[0].merge(val[1]) }
            | /* none */            { result = {} }
            ;

zone        : ZONE NAME ans         { result = { val[1] => val[2] } }
            ;

ans         : ans ';' an            { result = val[0] << val[2] }
            | an                    { result = [val[0]] }
            | /* none */            { result = [] }
            ;

an          : NAME
            | PORT
            | WWPN
            ;

aliass      : aliass alias          { result = val[0].merge(val[1]) }
            | /* none */            { result = {} }
            ;

alias       : ALIAS NAME aps        { result = { val[1] => val[2] } }
            ;

aps         : aps ';' ap            { result = val[0] << val[2] }
            | ap                    { result = [val[0]] }
            | /* none */            { result = [] }
            ;

ap          : PORT
            | WWPN
            ;

ezones      : ezones ezone          { result = val[0].merge(val[1]) }
            | /* none */            { result = {} }
            ;

ezone       : ZONE NAME ports       { result = { val[1] => val[2] } }
            ;

ports       : ports port            { result = val[0] << val[1] }
            | /* none */            { result = [] }
            ;

port        : PORT
            | WWPN
            ;

end

---- inner
  def on_error *rr
    puts "---- on_error   lineno:#{@lineno}"
    super
  end

---- header
require "pp"
require "shellwords"
require 'fileutils'
require File.join(File.absolute_path(__dir__), "zoneshow.rex.rb")

---- footer

class SANZoneStringManualParser
  def _definedcfg2defx(all)
    if all.lstrip.start_with? 'no configuration defined'
      return [{}, {}, {}]
    end
    cfg_str, other = all.split('zone:', 2)
    zone_str, ali_str = other.split('alias:', 2)

    cfgs=cfg_str.split('cfg:').map do |s|
      s.gsub(";",' ').shellsplit
    end
    cfgs.delete([])
    cfgh = {}
    cfgs.each do |cfg|
      cfgh[cfg[0]] = cfg[1..-1]
    end

    as = {}
    ali_str.to_s.split("alias:").map do |s|
      ss = s.gsub(";",' ').shellsplit
      as[ss[0]] = ss[1..-1]
    end

    zs = {}
    zone_str.split("zone:").each do |s|
      ss = s.gsub(";",' ').shellsplit
      zs[ss[0]] = ss[1..-1]
    end

    [cfgh, zs, as]
  end

  def _effectivecfg2effx(all)
    if all.lstrip.start_with? 'no configuration in effect'
      return({})
    end
    cfg_str, zone_str = all.split('zone:', 2)

    cfgs=cfg_str.split('cfg:')
    STDERR.puts "Error: effective config size > 1. #{cfg_str}" unless cfgs.size == 2 && cfgs[0].strip == ''
    cfg_name = cfgs[1].strip

    zs = {}
    zone_str.split('zone:').each do |s|
      ss = s.shellsplit
      zs[ss[0]] = ss[1..-1]
    end
    {cfg_name => zs}
  end

  def scan_str(str)
    defcfg, effcfg = str.sub(/^\s*Defined configuration:/, '').split(/^\s*Effective configuration:/)
    defx2 = _definedcfg2defx(defcfg)
    effx2 = _effectivecfg2effx(effcfg)
    [defx2, effx2]
  end
end


module SANUtil
  def self.find_zoneshow_str_from_log(str)
    begin_pos = str.rindex(/^\s*Defined configuration:/)
    return ('') unless begin_pos
    end_pos = str.index(/^.+\>|^\s*{/, begin_pos) || 0
    str[begin_pos..end_pos-1]
  end

  def self.diff_defx_and_effx(defx1, effx1)
    res = defx_split_and_expand_ports(defx1)
    eff_name = effx1.keys[0]
    effx1[eff_name] == res[eff_name]
  end

  def self.generate_effictive_create_script_from_effx(effx1)
    str_s = []
    effx1 = $keeporder ? effx1.to_a : effx1.to_a.sort
    effx1.each do |k2, v2|
      _v2 = $keeporder ? v2.to_a : v2.to_a.sort
      _v2.each do |k, v|
        vs = v.join(';')
        STDERR.puts 'Error: zone join have " ' if vs.include?('"')
        str_s << %{ zonecreate "#{k}","#{vs}"}
      end

      str_s << ''
      vs = v2.keys.join(';')
      STDERR.puts 'Error: cfg join have " ' if vs.include?('"')

      str_s << %{cfgcreate "#{k2}","xxx"}
      _ks = $keeporder ? v2.keys.to_a : v2.keys.to_a.sort
      _ks.each { |zn| str_s << %{ cfgadd "#{k2}","#{zn}"} }
      str_s << %{cfgremove "#{k2}","xxx"}
    end
    str_s << ''
    str_s << ' # cfgsave'
    str_s
  end

  def self.defx_split_and_expand_ports(defx1)
    cfgs, zones, aliass = defx1

    res = {}
    cfgs = $keeporder ? cfgs.to_a : cfgs.to_a.sort
    cfgs.each do |cfgname, zns|
      res[cfgname] = z_ = {}
      zns.each do |zn|
        z_[zn] = v_ = []
        zones.fetch(zn).each do |pOwOn|
          # FIXME TODO
          v_.concat(/^\d+,\d+$|^\w{2}(:\w{2}){7}$/ =~ pOwOn ? [pOwOn] : aliass.fetch(pOwOn))
        end
      end
    end
    res
  end

  def self.remove_not_effactive_cfg(defx1, keeped_cfgname)
    cfgs, zones, aliass = defx1

    cfgs_a, zones_a, aliass_a = if $keeporder
      [cfgs.to_a, zones.to_a, aliass.to_a]
    else
      [cfgs.to_a.sort, zones.to_a.sort, aliass.to_a.sort]
    end

    res = []
    usedzns = usedalias = nil
    cfgs_a.each do |cfgname, zns|
      if cfgname == keeped_cfgname
        usedzns = zns.to_a
        usedzns = usedzns.sort unless $keeporder
        usedalias = usedzns.map { |zn| zones.fetch(zn) }.flatten.uniq
        usedalias = usedalias.sort unless $keeporder
      else
        res << %Q{cfgdelete "#{cfgname}"}
      end
    end

    res << ''
    zones_a.each do |znn, znv|
      res << %{zonedelete "#{znn}"} unless usedzns.include?(znn)
    end

    res << ''
    aliass_a.each do |alin, aliv|
      res << %{alidelete "#{alin}"} unless usedalias.include?(alin)
    end

    res
  end

  def self.generate_split_cfg_create_script_from_defx(defx1)
    cfgs, zones, aliass = defx1
    rvs = {}
    cfgs_a = $keeporder ? cfgs.to_a : cfgs.to_a.sort
    cfgs_a.each do |cfgname, zns|
      rvs[cfgname] = str_s = []
      usedzns = zns.to_a
      usedzns = usedzns.sort unless $keeporder
      usedalias = usedzns.map { |zn| zones.fetch(zn) }.flatten.uniq
      usedalias = usedalias.sort unless $keeporder

      str_s << "-- #{cfgname}"
      usedalias.each do |ali|
        if v=aliass[ali]
          str_s << %Q{ alicreate "#{ali}","#{v.join ';'}"}
        else
          STDERR.puts "??" unless /^\d+,\d+$|^\w{2}(:\w{2}){7}$/ =~ ali # FIXME mulit value in alias
        end
      end
      str_s << ''
      usedzns.each do |zn|
        v = zones.fetch(zn)
        str_s << %Q{ zonecreate "#{zn}","#{v.join ';'}"}
      end

      str_s << ''
      str_s << %Q{cfgcreate "#{cfgname}","xxx"}
      usedzns.each do |zn|
        str_s << %Q{ cfgadd "#{cfgname}","#{zn}"}
      end
      str_s << %Q{cfgremove "#{cfgname}","xxx"}
      str_s << " # cfgsave"
      str_s << ''
    end

    rvs
  end

  def self.generate_all_create_script_from_defx(defx1)
    cfgs, zones, aliass = defx1

    cfgs_a, zones_a, aliass_a = if $keeporder
      [cfgs.to_a, zones.to_a, aliass.to_a]
    else
      [cfgs.to_a.sort, zones.to_a.sort, aliass.to_a.sort]
    end

    str_s = []
    aliass_a.each do |k, v|
      vs = v.join(';')
      STDERR.puts 'Error: alias join have " ' if vs.include?('"')
      str_s << %{ alicreate "#{k}","#{vs}"}
    end

    str_s << ''
    zones_a.each do |k, v|
      vs = v.join(';')
      STDERR.puts 'Error: zone join have " ' if vs.include?('"')
      str_s << %{ zonecreate "#{k}","#{vs}"}
    end

    str_s << ''
    cfgs_a.each do |k, v|
      vs = v.join(';')
      STDERR.puts 'Error: cfg join have " ' if vs.include?('"')
      str_s << %{cfgcreate "#{k}","xxx"}
      _vv = $keeporder ? v.to_a : v.to_a.sort
      _vv.each { |zn| str_s << %{ cfgadd "#{k}","#{zn}"} }
      str_s << %{cfgremove "#{k}","xxx"}
    end
    str_s << ''
    str_s << ' # cfgsave'

    str_s
  end


  # parse log file
  # generate /tmp/ttt2/xxx/*.log
  def self.parse_file(fn)
    bd = File.directory?("/tmp") ? "/tmp/ttt2" : "c:"
    tmpdir = "#{bd}/sanlog-#{File.basename(fn).chomp(File.extname fn)}-#{Time.now.strftime '%H%M%S'}"
    FileUtils.mkdir_p(tmpdir) unless File.directory?(tmpdir)

    zoneshow_s = find_zoneshow_str_from_log(File.binread fn)
    if zoneshow_s.empty?
      STDERR.puts "empty zoneshow\n\n\n"
      return
    end

    defx1, effx1 = SANZoneRaccParser.new.scan_str(zoneshow_s)
    defx2, effx2 = SANZoneStringManualParser.new.scan_str(zoneshow_s)
    dif1, dif2 = [defx1 == defx2, effx1 == effx2]

    File.open("#{tmpdir}/0-parse_summary.log", 'w') do |f|
      STDERR.puts f.path
      f.puts "\n### Same Result on RACCParser and StringManualParser ? \n [#{dif1}, #{dif2}]"
      unless dif1
        PP.pp(defx1, f)
        f.puts ''
        PP.pp(defx2, f)
      end
      unless dif2
        PP.pp(effx1, f)
        f.puts ''
        PP.pp(effx2, f)
      end
    end


    cfgs, zones, aliass = defx1
    File.open("#{tmpdir}/1-defined_config_summary.log", 'w') do |f|
      STDERR.puts f.path
      f.puts "\n#### Defined config summary: \ncfgs: #{cfgs.size}  zones: #{zones.size}  aliass: #{aliass.size}"
      PP.pp({'all config'=>cfgs}, f, 220)
      f.puts ''
      PP.pp({'all zone'=>zones}, f, 220)
      f.puts ''
      PP.pp({'all alias'=>aliass}, f, 220)
    end

    File.open("#{tmpdir}/2-effective_config.log", 'w') do |f|
      STDERR.puts f.path
      f.puts "\n#### Effective config:"
      PP.pp(effx1, f, 220)
    end

    res = defx_split_and_expand_ports(defx1)
    File.open("#{tmpdir}/3-defined_config_split_expand_ports.log", 'w') do |f|
      STDERR.puts f.path
      f.puts "\n#### Show defined config split and expand ports:"
      PP.pp(res, f, 220)
    end

    res = diff_defx_and_effx(defx1, effx1)
    File.open("#{tmpdir}/4-diff_effective_defined_confg.log", 'w') do |f|
      STDERR.puts f.path
      f.puts "\n### Same Result Effective config and Defined config ? \n [#{res}]"
    end

    res = generate_effictive_create_script_from_effx(effx1)
    File.open("#{tmpdir}/5-create_script_from_effective.log", 'w') do |f|
      STDERR.puts f.path
      f.puts "\n\n#### from Effective config generated Create Script:"
      f.puts res
    end

    res = generate_all_create_script_from_defx(defx1)
    File.open("#{tmpdir}/6-create_script_all_from_defined_config.log", 'w') do |f|
      STDERR.puts f.path
      f.puts "\n\n#### from Defined config generated Create Script:"
      f.puts res
    end

    rvs = generate_split_cfg_create_script_from_defx(defx1)
    rvs.each do |k,v|
      File.open("#{tmpdir}/7-create_script_#{k}_from_defined_config.log", 'w') do |f|
        STDERR.puts f.path
        f.puts "\n\n#### from Defined config #{k} generated Create Splited Script:"
        f.puts v
      end
    end

    eff_cfgname = effx1.keys[0]
    res = remove_not_effactive_cfg(defx1, eff_cfgname)
    File.open("#{tmpdir}/8-remove_not_effactive_cfg.log", 'w') do |f|
      STDERR.puts f.path
      f.puts "\n\n#### delete not Effectived config, Keeped {#{eff_cfgname}} :"
      f.puts res
    end
  end

end


if __FILE__ == $0
  fns = []
  gvs1 = global_variables.dup
  while fn = ARGV.shift
    if %w[-h --help].include? fn
      STDERR.puts "\nSyntax:\n  ruby #{File.basename $0} [--keeporder] xx.log [xx.log ..]"
      exit
    elsif fn.start_with? '-'
      fn = fn.sub(/^\-+/,'')
      eval "\$#{fn} = true"
    elsif File.file? fn
      fns << fn
    end
  end
  gvs2 = global_variables.dup
  STDERR.puts "set: #{gvs2 - gvs1}"

  fns.each do |fn|
      STDERR.puts "\n----- #{fn} -----\n"
      SANUtil.parse_file(fn)
  end
end

#vim set sw=2 ts=2 sts=2 et
