#
# DO NOT MODIFY!!!!
# This file was automatically generated by Racc 2.0.0
# (codename: Mecha Oishii) from Racc grammar file "reformat-san-script.racc".
#

require 'racc/parser.rb'

Object.module_eval(<<'...end reformat-san-script.racc/module_eval...', 'reformat-san-script.racc', 94)
require 'pp'
require 'fileutils'
# require 'racc'
require_relative "reformat-san-script.rex"



...end reformat-san-script.racc/module_eval...
class SCC < Racc::Parser

module_eval(<<'...end reformat-san-script.racc/module_eval...2', 'reformat-san-script.racc', 102)


...end reformat-san-script.racc/module_eval...2
##### State transition tables begin ###

racc_action_table = [
10, 11, 50, 46, 42, 43, 3, 13, 22, 47, 48, 15, 51, 17, 19, 
21, 46, 13, 15, 17, 21, 19, 47, 48, 28, 29, 31, 31, 31, 31, 
35, 36, 37, 38, 39, 40, 49]

racc_action_check = [
2, 2, 44, 40, 39, 39, 1, 2, 3, 40, 40, 2, 44, 2, 2, 
2, 51, 5, 6, 7, 8, 9, 51, 51, 11, 13, 15, 17, 19, 21, 
28, 29, 31, 35, 36, 37, 41]

racc_action_pointer = [nil, 6, -
2, 8, nil, 8, 5, 4, 3, 5, nil, 20, nil, 21, nil, 22, nil, 
23, nil, 24, nil, 25, nil, nil, nil, nil, nil, nil, 25, 26, nil, 27, 
nil, nil, nil, 29, 24, 25, nil, -7, -2, 32, nil, nil, -2, nil, nil, nil, nil, nil, nil, 11, nil]

racc_action_default = [-3, -35, -1, -35, -2, -4, -5, -6, -7, -8, -9, -35, -13, -35, -18, -35, -27, -35, -30, -35, -33, -35, 53, -12, -17, -26, -32, -29, -35, -35, -19, -35, -28, -31, -34, -35, -35, -35, -10, -35, -35, -35, -15, -16, -35, -22, -23, -24, -25, -14, -20, -35, -21]

racc_goto_table = [
45, 18, 14, 30, 20, 32, 24, 33, 27, 34, 26, 52, 16, 12, 1, 
2, 23, 25, 4, 5, 6, 7, 8, 9, 41, 44]

racc_goto_check = [
15, 17, 12, 13, 18, 13, 12, 13, 17, 13, 18, 15, 16, 10, 1, 
2, 10, 16, 3, 4, 5, 6, 7, 8, 11, 14]

racc_goto_pointer = [nil, 14, 15, 16, 17, 18, 19, 20, 21, nil, 11, -15, 0, -12, -15, -40, 10, -1, 2]

racc_goto_default = [
nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 
nil, nil, nil, nil]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 19, :_reduce_none,
  2, 20, :_reduce_none,
  0, 20, :_reduce_none,
  1, 21, :_reduce_4,
  1, 21, :_reduce_5,
  1, 21, :_reduce_6,
  1, 21, :_reduce_7,
  1, 21, :_reduce_8,
  1, 21, :_reduce_9,
  4, 21, :_reduce_10,
  3, 27, :_reduce_11,
  2, 22, :_reduce_12,
  1, 22, :_reduce_none,
  6, 28, :_reduce_14,
  1, 29, :_reduce_none,
  1, 29, :_reduce_none,
  2, 23, :_reduce_17,
  1, 23, :_reduce_none,
  2, 30, :_reduce_19,
  5, 31, :_reduce_20,
  3, 32, :_reduce_21,
  1, 32, :_reduce_22,
  1, 33, :_reduce_none,
  1, 33, :_reduce_none,
  1, 33, :_reduce_none,
  2, 24, :_reduce_26,
  1, 24, :_reduce_none,
  2, 34, :_reduce_28,
  2, 26, :_reduce_29,
  1, 26, :_reduce_none,
  2, 35, :_reduce_31,
  2, 25, :_reduce_none,
  1, 25, :_reduce_none,
  2, 36, :_reduce_34 ]

racc_reduce_n = 35

racc_shift_n = 53

racc_token_table = {
  false => 0,
  :error => 1,
  "cfgsave" => 2,
  "cfgenable" => 3,
  "\"" => 4,
  :NAME => 5,
  "dominID" => 6,
  ":" => 7,
  :NUMBER => 8,
  "alicreate" => 9,
  "\",\"" => 10,
  :WWPN => 11,
  :PORT => 12,
  "zonecreate" => 13,
  ";" => 14,
  "cfgcreate" => 15,
  "cfgadd" => 16,
  "cfgremove" => 17 }

racc_nt_base = 18

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"cfgsave\"",
  "\"cfgenable\"",
  "\"\\\"\"",
  "NAME",
  "\"dominID\"",
  "\":\"",
  "NUMBER",
  "\"alicreate\"",
  "\"\\\",\\\"\"",
  "WWPN",
  "PORT",
  "\"zonecreate\"",
  "\";\"",
  "\"cfgcreate\"",
  "\"cfgadd\"",
  "\"cfgremove\"",
  "$start",
  "main",
  "others",
  "other",
  "alicreates",
  "zonecreates",
  "cfgcreates",
  "cfgremoves",
  "cfgadds",
  "domin",
  "alicreate",
  "WWPNorNAME",
  "zonecreate",
  "NAME_NAMES",
  "NAMES",
  "zNAME",
  "cfgcreate",
  "cfgadd",
  "cfgremove" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'reformat-san-script.racc', 12)
  def _reduce_4(val, _values, result)
     $alicreates.merge!(val[0])  ;      p ['$alicreates',     $alicreates.size] 
    result
  end
.,.,

module_eval(<<'.,.,', 'reformat-san-script.racc', 13)
  def _reduce_5(val, _values, result)
     $zonecreates.merge!(val[0])  ;     p ['$zonecreates',    $zonecreates.size] 
    result
  end
.,.,

module_eval(<<'.,.,', 'reformat-san-script.racc', 14)
  def _reduce_6(val, _values, result)
     $cfgcreates.merge!(val[0])  ;      p ['$cfgcreates',     $cfgcreates.size] 
    result
  end
.,.,

module_eval(<<'.,.,', 'reformat-san-script.racc', 15)
  def _reduce_7(val, _values, result)
     
    result
  end
.,.,

module_eval(<<'.,.,', 'reformat-san-script.racc', 18)
  def _reduce_8(val, _values, result)
                      ov, nv = $cfgadds, val[0]
                  k,v=nv.first
                  result = if v2=ov[k]
                    ov.merge({k=> v+v2})
                  else
                    ov.merge(nv)
                  end

                  $cfgadds.merge!(result);         p ['$cfgadds',        $cfgadds.map { |k,v| "#{k}:#{v.size}" }] 
    result
  end
.,.,

module_eval(<<'.,.,', 'reformat-san-script.racc', 27)
  def _reduce_9(val, _values, result)
     $cfgsave << val[0] ;               p ['$cfgsave',        $cfgsave.size] 
    result
  end
.,.,

module_eval(<<'.,.,', 'reformat-san-script.racc', 28)
  def _reduce_10(val, _values, result)
     $cfgenable << val[2] ;  p ['$cfgenable',      $cfgenable.size] 
    result
  end
.,.,

module_eval(<<'.,.,', 'reformat-san-script.racc', 31)
  def _reduce_11(val, _values, result)
     result = "domainID #{val[2]}"; puts result 
    result
  end
.,.,

module_eval(<<'.,.,', 'reformat-san-script.racc', 34)
  def _reduce_12(val, _values, result)
     result = val[0].merge(val[1]) 
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'reformat-san-script.racc', 38)
  def _reduce_14(val, _values, result)
     result = { val[2] => val[4] } 
    result
  end
.,.,

# reduce 15 omitted

# reduce 16 omitted

module_eval(<<'.,.,', 'reformat-san-script.racc', 44)
  def _reduce_17(val, _values, result)
     result = val[0].merge(val[1]) 
    result
  end
.,.,

# reduce 18 omitted

module_eval(<<'.,.,', 'reformat-san-script.racc', 47)
  def _reduce_19(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'reformat-san-script.racc', 50)
  def _reduce_20(val, _values, result)
     result = { val[1] => val[3] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'reformat-san-script.racc', 53)
  def _reduce_21(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'reformat-san-script.racc', 54)
  def _reduce_22(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

module_eval(<<'.,.,', 'reformat-san-script.racc', 61)
  def _reduce_26(val, _values, result)
     result = val[0].merge(val[1]) 
    result
  end
.,.,

# reduce 27 omitted

module_eval(<<'.,.,', 'reformat-san-script.racc', 64)
  def _reduce_28(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'reformat-san-script.racc', 68)
  def _reduce_29(val, _values, result)
                          ov, nv = val[0], val[1]
                      k,v=nv.first
                      result = if v2=ov[k]
                        ov.merge({k=> v+v2})
                      else
                        ov.merge(nv)
                      end
                   
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'reformat-san-script.racc', 78)
  def _reduce_31(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 32 omitted

# reduce 33 omitted

module_eval(<<'.,.,', 'reformat-san-script.racc', 83)
  def _reduce_34(val, _values, result)
     k,v = val[1].first; ($cfgremoves[k] ||= []); $cfgremoves[k] += v 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class SCC

Object.module_eval(<<'...end reformat-san-script.racc/module_eval...3', 'reformat-san-script.racc', 105)
pr = SCC.new

if (['-h', '--help'] & ARGV).size > 0 || ARGV.empty?
  puts "   reformat create script"
end

tmpdir = File.directory?('/tmp') ? "/tmp/ttt2" : 'c:'
FileUitls.mkdir_p(tmpdir) unless File.directory?(tmpdir)
$stdoutbk = $stdout

fns = ARGV.map do |fn|
  tmpfn = "#{tmpdir}/#{Time.now.strftime '%H%M%S'}-#{File.basename fn}-reformat.log"
  $stdout = File.open(tmpfn, 'w')
  puts "filename #{fn}"
  $alicreates = {}
  $zonecreates  = {}
  $cfgcreates = {}
  $cfgremoves = {}
  $cfgadds  = {}
  $cfgsave  = []
  $cfgenable  = []

  pr.scan_file fn


  $alicreates.sort.each do |k,v|
    puts %{ alicreate "#{k}","#{v}"}
  end
  puts

  $zonecreates.sort.each do |k,v|
    puts %{ zonecreate "#{k}","#{v.sort.join ';'}"}
  end
  puts

  $cfgcreates.each do |k,v|
    puts %{cfgcreate "#{k}","xxx"}
    v2 = $cfgadds[k].to_a
    (v+v2).sort.each { |e| puts %{ cfgadd "#{k}","#{e}"} }
    puts %{cfgremove "#{k}","xxx"}
  end

  $cfgremoves.each do |k,v|
    puts %{ cfgremove "#{k}","#{v.sort.join ';'}"}
  end
  puts

  puts " # $cfgsave"
  PP.pp $cfgsave, $>, 120

  puts " # $cfgenable"
  PP.pp $cfgenable, $>, 120

  $stdout.close
  $stdout = $stdoutbk
  tmpfn
end
p fns

exec "mvim -d #{fns.join ' '}"
p 'end.'
...end reformat-san-script.racc/module_eval...3
